apt-get install mininet
/etc/init.d/openvswitch-switch restart
mn
help
help <topic>
links
nodes
net
pingall
ports

xterm h1 h2
--------------------------
h1 (h1-eth0 --> 10.0.0.1)
ifconfig
ping -c 4 10.0.0.2
--------------------------
h2 (h2-eth0 --> 10.0.0.2)
ifconfig
ping -c 4 10.0.0.1

Hay ping

ovs-vsctl list-br
s1


ovs-vsctl get-controller s1
ptcp:6654
ovs-vsctl get-fail-mode s1 

ovs-vsctl list-ifaces s1
ovs-vsctl iface-to-br s1-eth1
ovs-vsctl iface-to-br s1-eth2
ovs-vsctl show

822290ff-8ad5-49c0-87d2-b06efc249250
    Bridge "s1"
        Controller "ptcp:6654"
        fail_mode: standalone
        Port "s1"
            Interface "s1"
                type: internal
        Port "s1-eth2"
            Interface "s1-eth2"
        Port "s1-eth1"
            Interface "s1-eth1"
    ovs_version: "2.6.2"


-------------------------------------------------------------------

Ensayo sin controlador: http://containertutorials.com/network/ovs_docker.html

# 1. Se agrega el switch virtual y sus interfaces - Create an OVS bridge
sudo ovs-vsctl add-br s1
sudo ovs-vsctl list-br 
sudo ovs-vsctl show 

# Se listan las cosas 
sudo ovs-vsctl list-ifaces s1

# Se muestran las descripcion del switch
sudo ovs-vsctl show   

# 2. Connect the container to OVS bridge
# Poner a correr las 2 imagenes (en dos consolas diferentes) 
docker run -it --name=h1 --net=none kalilinux/kali-linux-docker /bin/bash 
docker run -it --name=h2 --net=none ubuntu /bin/bash 
docker ps



docker inspect --format '{{ .NetworkSettings.IPAddress }}' h1
docker inspect --format '{{ .NetworkSettings.IPAddress }}' h2

# Agregar una nueva interfaz de red al container y atarla a un Open vSwitch bridge

ovs-docker add-port s1 h1-eth0 h1 --ipaddress=10.0.0.1/8 
ovs-docker add-port s1 h2-eth0 h2 --ipaddress=10.0.0.2/8 

# 3. Test the connection between two containers connected via OVS bridge using Ping command
en h1: ifconfig ---> Se puede ver la Ip es la que esperamis


**********************************************************************************************


http://docker-k8s-lab.readthedocs.io/en/latest/docker/docker-ovs.html

docker run -d --name container1 centos:7 /bin/bash -c "while true; do sleep 3600; done"
docker run -d --name container2 centos:7 /bin/bash -c "while true; do sleep 3600; done"
docker inspect --format '{{.NetworkSettings.IPAddress}}' container1
docker inspect --format '{{.NetworkSettings.IPAddress}}' container2


sudo ovs-vsctl add-br br-int
sudo ovs-vsctl show
sudo ip link add veth0 type veth peer name veth1
sudo ovs-vsctl add-port br-int veth1
sudo brctl addif docker0 veth0
sudo ip link set veth1 up
sudo ip link set veth0 up
ip link




Almost do the same thing on host 2.

ubuntu@docker-node2:~$ ovs-vsctl add-br br-int
ubuntu@docker-node2:~$ sudo ip link add veth0 type veth peer name veth1
ubuntu@docker-node2:~$ sudo ovs-vsctl add-port br-int veth1
ubuntu@docker-node2:~$ sudo brctl addif docker0 veth0
ubuntu@docker-node2:~$ sudo ip link set veth1 up
ubuntu@docker-node2:~$ sudo ip link set veth0 up

*** http://docs.openvswitch.org/en/latest/howto/docker/


------------------------------------------>

NID=`docker network create -d openvswitch --subnet=192.168.1.0/24 foo`







